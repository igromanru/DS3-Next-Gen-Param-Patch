<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <Forms>
    <UDF2 Class="TCEForm" Encoding="Ascii85">jac1w8?CZwBzvvc(P}z[Cv8vAJvp[MN-L_jdu+LX3]L0,8[AMQ++?)ZxQpc=S@@sYE1JIQb;E/G)U/6p@hx;,uuDp@,JqP4Y5}m8H#6T1+!g@E;Fl*s:,0U1ps(s3*_;tQA8#Fr,@zh1B^}#xT*35gEw7yEYUSTcx8KRk6*XSv/aW1_V_8bhm%UO7/=iiilL/3OwX+l[kK{M;otPX8Ro?-SW2xjseh@E_uA!Ti.=C.G4y797smCiPwTf.HRIcv[fpg9G!vC${B^K9[O!S?bwe4,PUb/?P@3PftY:{norB;pzBdLT/hR)ns]$@Pc_M#:c%^d$Dy0mOC7[eR.xMK%u3=b{^k4h2s,1]wu7W)]H,hV8s^qyZ?Jp7HT55mwxUBVXT3c:n/mlk.ST3iTYMI({!,7xC,-=N_l6wXz4XKO19ClaZ+Ob{(BQnVE9vS0Gq,,;-3oXD{!6Ru31jBA,+yoQ7auXfm;o-)IdY%4xhF[Va^=L=g{Rzz7rAKPUEykx@Euh]n$uBxsRTWs0*KX$uYLS(Dg/j/b,G=_Lggsqc#5dN,ZMlfmF8(x7xoXFVWDL?%IK9P#!sjt*80!gWy#lMSv)fuA$uAUI:Fz9m[*GN5+sRPpel8+[3FBcB%+Ogf8:tTSBfEo*H5BUWGP-,+](P-Topuyq:TeFTEs79b4v0NLLOJkj1Ti..OL1jcP42,mDF^#]voEnLev=9!DZ48o,A:w}HGnso*8[Wtv%C@?N#-hDfwRCKzYcoGE/]coV%2:s,7M3i]v;RS+M(8(0k/OruNyVaH)R)G^2jf[#rz(B/.P)p+kShcigHPkJPsnqn*AJEe(pXjKA0vp,9$dhfA,)vUnP;xfUoYeplqu:[%tU9R;[mUMS(.Iodxh!R30oTm[aD*pLx?;Vu8J06]w3th7I5bWSwi$CMDL4HJw{Gqc?D9V$M#2KJe])(27L$bp[P*yi6,S!i8YEWKKQAY*hTS7yc4_As!8H[/MPs{)N3fe!H!m(@-k1-;c$5G,NMTUZiDGcD8NrBX+2TyE5Ju3aT1#b9T3C]JQnR#Qlun,]*IQ%R}]nDA@ddK2v-{$C=fQJp@4z;Tythv9ppI-@,sRvWDhJOuD/ocqc1Nx]9kZ:vblTRg=n+dVsj9J6bU-.5KeTn%m^0tXE@l}M($7J.E,XM]@b!2Z6_}bF+RU$E5-DBfDtF]8c]Ut,Hh)F!HhS:hBvsz**tI(*B1XFaw82?E(PT9MZy)/uGtj06GzS!vgmFb245?j!agt!N]w3-$k,;E5gB5dFFf?b4J,E0baZWTbPU_!wg9*:N}G4=@.)RiaRme/5b#bLRBl?v$KY@$wOiQQ3r!^M]xQ}.=-sHf:N9$VE4hWxZx;c_t4i=T@DgUieC-RzW!Y-F%8O[k66]n97M-KRq6Z(Yx96A0$8^VVu#}I,^QaK{ObE9oGd3zIF]z-g)b/$JJ?IUECQ4Ch.}-:H2#tI5^nuK_FtnIKXfY3NZZRD*/TtN(E?92t3ogos7EH*Z*]]BuN#d8dI}JbN/Hs;2(o4sf8s1cBRE;FwB.XilnnWcgI?T9rLR^Si5Z!i-0.$W:2Ys)O37Jpk=GE=;MKYYqyF@N(p-_[h!#c-XG)//G+opR[:B;0}hqkYdr7P-DlIqFUyk}FGV6y2ah*oP8n_=6a41;vLbo(K$@sCiZ)X61TQDN_+o={G:T(Sp1j=zYU4U{_{my+Vp;s5D5bU.}aF,PDIqF+0lXDT%scGzdXofALQKU%0KM3Dg[:Gwf[j=]72!!2!?h,xk#KL-b+$]-6yP]l/V^-35cbhjIy6-G{N+2XaB@1GHC1I5}:;11r{#}LAtzHge41kYz$J#:mLA/Ypa07vme1NT%%!5o4aDT+{DLRZx9HQoFKbBkK6(%4zwJ0Zst*:izfKq]1K?!2UsU]3hxnIqb30c(mb4iXlN86dQ#o3Ql;75xyvP1wG71#-us2e)tfO]1Q[YkXsizTi2LPrE!KFrr)9oDj:?@HCe]W1Pc.Gz4oAcL_y_]Uvhokpm]#RbfhOOWMynRQg*,63t#9THQ+ra{jzh(oYFCc1K?bYLbXD6l9@Gci5$z(-A65Q(kGK$Wi;AXmGW!$44BYKZI/GVLb2iRjsJk5t2Bapc#e%D2U0p/1FftWsS#iPglWI5Dr]=rrF1=IBB*fS[@$lL{3I5z32}TdW@eKJZ{Jjq.s@HqL}oq,#fxCiAiOL^T1jDtB],MLEGFW(]Ah.7_zIc(+TpmA.NtP5MQmo[Izl[ZPv/:*yJ5=)/Xr{GW!SvYVz?Hgq,MN8c^Eh3{+ESrr=amAq-4B!@;oDIxlUAJgH][=I/*5B-P=!PF/=CZ[NmFW$L@WTsn-P85wnWt@8hN*:}}_cv}}NauqE4ZCiXVX}N!{M/*0MY{mCi3%BD]c#{!E=Zkc-#1,L!;tyP=Q=tm/W_as_d6I$%1WtSixLokE7IRqcE/k_NuNtLFyS4@KTmdfhJ4)=_v{Dhmd@^hb]ev4LWqw2O+oE?,=_;3rVY}%VpRN?EN:[/DLF/JiREHq{rbszlF$i}5ADRo1S71HMrkKH5;9e#48#!4;/VRhPm%w={1k./z.^7JOyS3AsbjONWj;be;=pf[K%z%c(:v:rN5l3(3F9/#u@ivJ/33hhj,u*?u[,uFFYeon14cGCg-)1KMwt8ZlsT#YmS:ZwNw2]ng%2K,#D2?A-qPtL]EnV}AcrHsCcX}9om$:7SR$(c?Z)v$:z)o@w-p0!4k-z)Kdrss9v8{:0k=5J/7DB$]dpKHnPL=GpnJc]l3AlLc0yDDHl{wYWs5.TA]_jzp:iAS;fy=sAYs$.N.1)R)OezHpFjsyv0Np+j[M-r:sxT/13+4EvdQbZAhoUd}ORKMe2zt](*4RjeU_QMZ#??MW=OS1x)!5,f/D)N_pXH[1p)uxxLCZ@?.[)P3yJC3;pZ?^</UDF2>
    <UDF1 Class="TCEForm" Encoding="Ascii85">y[wH$,cp?$B^^MDCy84pZI)j.0Xeh-Hn,hrU_4(Jl@6,^ELrTdKyI_f,JtFQpqM4?w)EdB!gk)u$34UL2D_Q2MvAgzDWdGDSuc)*TA#k)=.{5n(eI*D;z#LAm[7TjL,E7X?{RS}asuD6)$7Zu2%[PLm447mJ;r!P[0[k=VWZM-x?iNCA;x+w9Wywwjt^I8/TGmsT{S}V*ap.I$(j^=]?VIK!4%Rp8zbnlC{LfHo(_hl6W3:HAeZ@AQ^,b9,e!]0PN/v^ABhyqhDQ#dKW4/Uc_b[D3THV1eTXZ#k9(k+zieMqpHQ/tphv*U(IykeKpM4;)P#*nqb3QBClO$oi2$F}(jIDpZGs7^Xz=Z1[$5vOzbXRQf4uJwMuc^e14Zx[Pn{VM%[xt{*EC4XvkH9LCXA8Eqj.DnbNBRSay(X*a.qWtvLU{^wh470=RsE/,,j-!iO6e^8JCj2(NF*rr)zB$.S,_62{pz{D#6W]?Z_ytV;q;t.8RMd@6a]E#OnIbYbs]7K0-kOrQfw_16IBP),{8][z!q$7r-4t:Pd+tU#uz%v8Q4V.]56d[+-G%D(IhZ26*zu/jd@@HedixeWtW/M@]Z!cfu5P?;0*s?=ycd7_cMGI%:X]BLuOtxG?()eA3a/=R[[dd-@a57l21;6/:npBx^I%1TlmQX8fFiVpX0CP[+s6%r/bDU+3)0z+^*uMSb=@giw]%w5ehm)ou?e@/TAY8N2y1%0M70C2Rx_D7o=51hd=@9:Iz05D:VR6#h;I^9!**Itb97[XS*2O?N;6,vGdw0,+;Qq,{IykqT1O$YVX+NO#fgK!83UgrrI+;paVE2*]k}A*)VHdPMOi?E[aYs{QuE,XmNMVhzIVm5?!I,?%j]Z_Xs)gD?AaB2D?zR^3O%^K89gmW{:?tH#gbS/eKI@*3MVIt4HGN^0=(n}:XO37[Gqn1PHy]5Lz4)F-9WinMxm!+@=2;ETowa.f_gHIMB./5%HM?E@@T:lk[lFy/p:Fcv46U;ro#vNW%5CJ$c7]c!)Le/qF[TBQqdmjTKQt.+k=KzGP%rfFJD%sal+Y=IqH%;VYuZSLknGJeoxk^UkH.wSOAJdjAj9uXh90z{T*#%$yLmloK+3T@,S:i9D.v5cOny@+on8]-7UN+/L#jYdtR7_sJNE_.EadNGcAPdHb+eDP^=5Bkiti5F}(jt]FDZBm_G?TI-+M,;79xeKkuwz6?z.!Y?uEO8{OGuR26fzu-+DgKI*+C(8FdHpa{RlFa?F[!6vSBZsO]h2D+d!?!jHkE5}W{qnybVuZ7as59w]hE03l^vnHy2l:P0fBSo.%PNDZz#:Ix%u]r()OWI7V.aSdQmkda3X$A8(DL=^nVP.3DA49N%OsWO.z?/8R==.u$tM66dfj7at^TKC2[209O%/nNJ(k800,vAcUn:wjdy0)DgC0U6fF;.Am$*+#4Gc{O]d@RW@,_qj,w^24]v:lGVkgN/^y]3ZuZD/h?s]gC@7V@Y%QmJLZ*YB^[OtW=$vjmCc@Q_b]h/aZv#0]X6:IN:_%IgZr_%C$c28Z%YqGzUf%A4iI:o+F=h=gxC[.}0{hVcfcoZ!=}Ag(fs}.Ez.U6//^RXrK86*#r%L:NWRq)+:TSNFaBvTgZmDtv_I095hf]IrcX-HFIJTC!x!2=e?dbXP+Zu[</UDF1>
    <BACForm Class="TCEForm" Encoding="Ascii85">jgrld):ZT#9p{H/Kdq1uh)kEQa*1=DaoFoN-KZ.qsMJVsO+d^EDUBn=3)X5}.lwj:.)d4ko]N(B/D[Y6l%B=xXTHpQlivma.lzJyhTg4?$.uqwcsyzWnp5;JG^z]dEUEevs3FePABz4diRn]PqnKWl)+$S6@I:JmdqYT6x+pEHAVLvwXQi7g2wp]Qc^uXY1ZA^AIn{*.Src3(9A%#6[)POryaA6TAOd)[w^b$vF/SE_]hqWITktXO3YxO1+NPQJvyUW31OjV^)kYDyg{]RV0A(lhga81GA%kd!Qj0Ogp?Ql*@i*8d3JM:JgQ[gwnM8zj:HV0+3jmw3h7XkD=3g]zI4]SPrSF$gBcBMQE_FIaQsX6=rj/7FOb}[7HuQ4]@nC,0Wz}jjw5J{S]_hdV^696z-/i5u3VZ5Y%Bwv})K=sX63L*[A{^)x;RTcOu},290V2)o$N}TFi+A+H/UMP6x}S-oX@Y2Bo#Q/@=E]e43T(THzfb6)%^-UPUZws4N{aY,KgAL4R,;uQ)}VM5)WO+8b{C*(Q3=-HDzJS?:Y2{mEv1s#t8^+VQmduZs3zDEAattVfrPziU@0D2sKaO.Ud]_juTQFs]dWb{TV}a7H8;vJQM9T+YV+ro7Na$U$NXGePAN(UMWGlP_ECP(%B_u%8LveI]jnO[GEeS^5yANgf6aoVXia;ig:kIdGPbRM</BACForm>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>250</ID>
      <Description>"Initialize"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end
--[[START Igromanru's widgets class]]--
-- Class for my UDF's
IgroWidgets = {}

function IgroWidgets:new()
  setmetatable({}, self)
  self.__index = self
  self.addressList = getAddressList()
  return self
end

function IgroWidgets:stringTrim(s)
  return s:gsub("^%s*(.-)%s*$", "%1")
end

function IgroWidgets:isNotEmpty(s)
  return s ~= nil and self:stringTrim(s) ~= ''
end

function IgroWidgets:isEmpty(s)
  return s == nil or self:stringTrim(s) == ''
end

function IgroWidgets:toHex(number)
  return string.format("%X",number)
end

function IgroWidgets:toHexLegth(number, length)
  if length == nil then length = 1 end
  length = length * 2
  return string.format("%0"..length.."X",number)
end

function IgroWidgets:floatToHex(number, length)
  local result = ""
  local byteTable = floatToByteTable(number)

  if length == nil then length = 1 end
  if(length &gt; #byteTable) then
    for i = 1, length-#byteTable do
      result = "00"..result
    end
  end
  for i, v in ipairs(byteTable) do
    result = string.format('%02X', v) .. result
  end
  return result
end

function IgroWidgets:floatToDecimal(number, length)
  return tonumber(self:floatToHex(number,length),16)
end

function IgroWidgets:floatToByteArray(number)
  local result = ""
  local byteTable = floatToByteTable(number)

  for i, v in ipairs(byteTable) do
    if(self:isNotEmpty(result)) then
      result = result .. " "
    end
    result = result .. string.format('%02X', v)
  end

  return result
end

function IgroWidgets:floatToByteArray(number)
  local result = ""
  local byteTable = floatToByteTable(number)

  for i, v in ipairs(byteTable) do
    if(self:isNotEmpty(result)) then
      result = result .. " "
    end
    result = result .. string.format('%02X', v)
  end

  return result
end

function IgroWidgets:decToHex(number, length)
  return self:toHexLegth(number,length)
end

function IgroWidgets:decToByteArray(number, length)
  return self:hexToByteArray(self:toHexLegth(number,length))
end

function IgroWidgets:hexToDecimal(hexString)
  return tonumber(hexString,16)
end

function IgroWidgets:hexToFloat(hexString)
  local byteTable = {}
  for hexChar in string.gmatch(hexString,"(%x%x)") do
    table.insert(byteTable,1,tonumber(hexChar,16))
  end
  return tonumber(string.format("%.2f", byteTableToFloat(byteTable)))
end

function IgroWidgets:hexToByteArray(hex)
  local result = ""
  local index = string.len(hex)-1
  local tmp = ""
  while index ~= nil and index &gt;= 0 do
    tmp = string.sub(hex, index, index+1)
    if igro:isNotEmpty(tmp) then
      if igro:isNotEmpty(result) then
        result = result .. " "
      end
      result = result .. tmp
    else
      break
    end
    index = index - 2
    sleep(1)
  end
  result = string.gsub(result, "%s$", "")
  return result
end

function IgroWidgets:byteArrayToHex(byteArray)
  local result = ""
  local index = 1
  local tmp = ""
  byteArray = string.gsub(byteArray, "%s", "")
  index = string.len(byteArray)-1
  while index ~= nil and index &gt;= 0 do
    tmp = string.sub(byteArray, index, index+1)
    if igro:isNotEmpty(tmp) then
      result = result .. tmp
    else
      break
    end
    index = index - 2
    sleep(1)
  end
  result = string.gsub(result, "%s$", "")
  return result
end

function IgroWidgets:byteArrayToDecimal(byteArray)
  return tonumber(self:byteArrayToHex(byteArray),16)
end

function IgroWidgets:byteArrayToFloat(byteArray)
  return self:hexToFloat(self:byteArrayToHex(byteArray))
end

function IgroWidgets:getRecordById(id)
  return self.addressList.getMemoryRecordByID(id)
end

function IgroWidgets:getRecordByDescription(description)
  return self.addressList.getMemoryRecordByDescription(description)
end

function IgroWidgets:getRecord(index)
  return self.addressList.getMemoryRecord(index)
end

-- Creating an instance of IgroWidgets
igro = IgroWidgets:new()
--[[END Igromanru's widgets class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>249</ID>
          <Description>"ParamUtils"</Description>
          <Options moHideChildren="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START PatchInfo class
	Author: Igromanru
	Description: Entity with informations (address, value and valueType).
					Also enum TYPE, with all possible value types.
]]--
PatchInfo = {
	address = 0,
	value = 0,
	valueType = 0,
	TYPE = {
		BYTE = 0,
		TWO_BYTE = 1,
		FOUR_BYTE = 2,
		EIGHT_BYTE = 3,
		FLOAT = 4
	}
}
function PatchInfo:new(address, value, valueType)
	setmetatable({}, self)
	self.__index = self
	if(address ~= nil) then
		self.address = address
	end
	if(value ~= nil) then
		self.value = value
	end
	if(valueType ~= nil) then
		self.valueType = valueType
	end

	return self
end

--[[END PatchInfo class]]--

--[[START ParamUtils class
	Author: Igromanru
	Description: Utils class for Params
]]--
ParamUtils = {
	masterParamTable = {},
	patchBackUp = {},
    patchBackUpOld = {},
}

function ParamUtils:new()
	local function readIntegerSafe(Input)
		local Value = readInteger(Input)
		if Value &lt; 2147483647 then
			return Value
		else
			return Value - 0x100000000
		end
	end
	local function InitializeAddress()
		autoAssemble([[
			aobscanmodule(ParamPatchBase,DarkSoulsIII.exe,48 8B 0D ? ? ? ? 48 85 C9 74 0B 4C 8B C0 48 8B D7)
			registersymbol(ParamPatchBase)
		]])
		local addr = getAddress("ParamPatchBase")
		addr = addr + readIntegerSafe(addr + 0x3) + 7
		addr = readQword(addr)+ 0x10
		unregisterSymbol("ParamPatch")
		registerSymbol("ParamPatch", addr, true)
	end

	setmetatable({}, self)
	self.__index = self

    InitializeAddress()
	self:ParamIndexer()
	return self
end

function ParamUtils:destroy()
	unregisterSymbol("ParamPatch")
	unregisterSymbol("ParamPatchAOB")
end

function ParamUtils:ParamIndexer()
	local Param = getAddress("ParamPatch")
	local Start = readQword(Param)
	local End = readQword(Param+8)
	local Count = (End-Start)/8
	self.masterParamTable = {}

	for i = 0, Count - 1 do
	  local ParamOffset = readQword(Start+i*8)
	  local ParamString = "Unknown"
	  if readInteger(ParamOffset+0x20) &gt; 7 then
		 ParamString = readString(readQword(ParamOffset+0x10),90,true)
	  else
		 ParamString = readString(ParamOffset+0x10,90,true)
	  end
	  self.masterParamTable[ParamString] = ParamOffset
	end
end

function ParamUtils:GetIdAddress(IdTable, Id)
	local result = IdTable[Id]
	if result == nil then
		showMessage("ID:"..Id.." (hex:"..igro:toHex(Id) ..") couldn't be found")
	end
	return result
end

function ParamUtils:GetParamIdTable(ParamName)
	local IDTable = {}
	local ParamAddr = readQword(readQword(self.masterParamTable[ParamName]+0x68)+0x68)
	local TableCount = byteTableToWord(readBytes(ParamAddr+0xa,2,true))
	for i=0,TableCount-1 do
		local PID = readInteger(ParamAddr+0x40+0x18*i)
		local IDO = readInteger(ParamAddr+0x48+0x18*i)
		IDTable[PID] = ParamAddr + IDO
	end
	return IDTable
end

function ParamUtils:GetIdAddressFromParam(paramName, id)
	local result = 0
	local idTable = self:GetParamIdTable(paramName)

	if(idTable ~= nil) then
		result = self:GetIdAddress(idTable, id)
	end
	return result
end

function ParamUtils:ParamIterator(ParamName,ChangeTable,uuid)
	local IDTable = self:GetParamIdTable(ParamName)
	if uuid ~= nil then --Make a table for backups
		if self.patchBackUpOld == nil then
			self.patchBackUpOld = {}
		end
		self.patchBackUpOld[uuid] = {}
		for k,v in pairs(ChangeTable) do
			local Backup = {}
			local _,DataLength = string.gsub(v[3], "%x+","")
			local idAddress = self:GetIdAddress(IDTable,v[1])
			if idAddress ~= nil then
				Backup[1] = idAddress + v[2]
				Backup[2] = readBytes(Backup[1],DataLength,true)
				table.insert(self.patchBackUpOld[uuid],Backup)
				self:ParamPatcher(idAddress,v[2],v[3],v[4])
			end
		end
	else
		for k,v in pairs(ChangeTable) do
			local idAddress = GetIdAddress(IDTable,v[1])
			if idAddress ~= nil then
				self:ParamPatcher(idAddress,v[2],v[3],v[4])
			end
		end
	end
end

function ParamUtils:ParamPatcher(idAddress,DataOffset,Data,Symbol)
	local WriteAddr = idAddress+DataOffset
	local HexTable = {}
	if Symbol == nil then
		for word in string.gmatch(Data, "%x+") do table.insert(HexTable,tonumber(word,16)) end
		writeBytes(WriteAddr,HexTable)
	else
		registerSymbol(Symbol,WriteAddr,true)
	end
end

function ParamUtils:ParamDepatcher(uuid)
	for k,v in pairs(self.patchBackUpOld[uuid]) do
		writeBytes(v[1],v[2])
	end
	self.patchBackUpOld[uuid] = nil
end

function ParamUtils:PatchMultipleOffsets(paramName, id, patchInfoTable, uuid)
	if(self.patchBackUp[uuid] == nil) then
		local address = GetIdAddressFromParam()
		for key,patchInfo in pairs(patchInfoTable) do
			patchInfo.address = address
			self:PatchValueWithBackup(patchInfo)
		end
	else
		showMessage("Error: The UUID "..uuid.." is already in use.")
	end
end

function ParamUtils:Restore(uuid)
	for key,patchInfo in pairs(self.patchBackUp[uuid]) do
		self:PatchValue(patchInfo)
	end
end

function ParamUtils:PatchValueWithBackup(patchInfo, uuid)
	local readValue = self:ReadValue(patchInfo)
	table.insert(self.patchBackUp[uuid], {PatchInfo:new(patchInfo.address, readValue, patchInfo.valueType)})
	self:PatchValue(patchInfo)
end

function ParamUtils:PatchValue(patchInfo)
	if(patchInfo.patchInfo.valueType == PatchInfo.TYPE.BYTE) then
		writeBytes(patchInfo.address, patchInfo.value)
	elseif(patchInfo.patchInfo.valueType == PatchInfo.TYPE.TWO_BYTE) then
		writeWord(patchInfo.address, patchInfo.value)
	elseif(patchInfo.patchInfo.valueType == PatchInfo.TYPE.FOUR_BYTE) then
		writeInteger(patchInfo.address, patchInfo.value)
	elseif(patchInfo.patchInfo.valueType == PatchInfo.TYPE.EIGHT_BYTE) then
		writeQword(patchInfo.address, patchInfo.value)
	elseif(patchInfo.patchInfo.valueType == PatchInfo.TYPE.FLOAT) then
		writeFloat(patchInfo.address, patchInfo.value)
	end
end

function ParamUtils:ReadValue(patchInfo)
	local value = 0
	if(patchInfo.valueType == PatchInfo.TYPE.BYTE) then
		value = readBytes(patchInfo.address, 1)
	elseif(patchInfo.valueType == PatchInfo.TYPE.TWO_BYTE) then
		value = readWord(patchInfo.address)
	elseif(patchInfo.valueType == PatchInfo.TYPE.FOUR_BYTE) then
		value = readInteger(patchInfo.address)
	elseif(patchInfo.valueType == PatchInfo.TYPE.EIGHT_BYTE) then
		value = readQword(patchInfo.address)
	elseif(patchInfo.valueType == PatchInfo.TYPE.FLOAT) then
		value = readFloat(patchInfo.address)
	end
	return value
end

-- Creating an instance of ParamUtils
paramUtils = ParamUtils:new()
--[[END ParamUtils class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end
paramUtils:destroy()

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>252</ID>
              <Description>"BaseParamClass"</Description>
              <Options moHideChildren="1"/>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START BaseParamClass class]]--
BaseParamClass = {
	id = 0,
	patchs = {},
	param = "",
}

function BaseParamClass:new()
	setmetatable({}, self)
	self.__index = self

	return self
end

function BaseParamClass:AddPatch(offset, value, valueType)
	table.insert(self.patchs,PatchInfo:new(offset, value, valueType))
end

function BaseParamClass:Patch()
	for i = 0, #self.patchs do
		paramUtils:PatchValue(self.id, self.patchs[i])
	end
end

--[[END BaseParamClass class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>251</ID>
                  <Description>"EquipParamClass"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--[[START EquipParamClass class]]--
EquipParamClass = BaseParamClass:new()

function EquipParamClass:new()
	setmetatable({}, self)
	self.__index = self

	return self
end

--[[END EquipParamClass class]]--

[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>253</ID>
              <Description>"ParamUtils Tests"</Description>
              <Options moHideChildren="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>254</ID>
                  <Description>"ReadValue Tests"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

--A87500 (Dark Hand)
local info = PatchInfo:new(address, 0, PatchInfo.TYPE.FLOAT)


[DISABLE]
{$lua}
if syntaxcheck then return end

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Gestures access :mov eax,[rcx]</Description>
      <Address>14081D330</Address>
      <ModuleName>DarkSoulsIII.exe</ModuleName>
      <ModuleNameOffset>81D330</ModuleNameOffset>
      <Before>
        <Byte>72</Byte>
        <Byte>C1</Byte>
        <Byte>FF</Byte>
        <Byte>CC</Byte>
        <Byte>8B</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>02</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>C2</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>HP :mov [rbx+000000D8],eax</Description>
      <Address>140E94AA7</Address>
      <ModuleName>DarkSoulsIII.exe</ModuleName>
      <ModuleNameOffset>E94AA7</ModuleNameOffset>
      <Before>
        <Byte>C8</Byte>
        <Byte>CE</Byte>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>83</Byte>
        <Byte>D8</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>55</Byte>
        <Byte>48</Byte>
        <Byte>BD</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>newmem2</Name>
      <Address>08DB0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BonFireAOB</Name>
      <Address>140BE4F8B</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>BonFireAOBOriginal</Name>
      <Address>13FFF0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>messageRepoP</Name>
      <Address>140E1683C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>projectile</Name>
      <Address>14063C6E4</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>projectile_ptr</Name>
      <Address>13FFF0022</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AttackAddressToUse</Name>
      <Address>08DB0000</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Hotkeys:
Ctrl+N - toggle Noclip
	
</Comments>
</CheatTable>
